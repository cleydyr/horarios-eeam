% Use this editor as a MiniZinc scratch book
enum disciplinas = {POR, ESP, ING, ART, MAT, FIS, QUI, BIO, HIS, GEO, SOC, FIL, EDF, EMP, MAF, GPE, ROB, CPE, MEA};
enum turmas = {R1G, R1H, R1I, R2D, R2E, R3C, R3D, M2A};
enum professores = {DY, MA, SH, LI, FB, FT, RI, LU, AD, KK, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB};
enum aulas = {POR_R1G, POR_R1H, POR_R1I, POR_R2D, POR_R2E, POR_R3C, POR_R3D, POR_M2A, ESP_R1G, ESP_R1H, ESP_R1I, ESP_R2D, ESP_R2E, ESP_R3C, ESP_R3D, ESP_M2A, ING_R1G, ING_R1H, ING_R1I, ING_R2D, ING_R2E, ING_R3C, ING_R3D, ING_M2A, ART_R1G, ART_R1H, ART_R1I, ART_R2D, ART_R2E, ART_R3C, ART_R3D, ART_M2A, MAT_R1G, MAT_R1H, MAT_R1I, MAT_R2D, MAT_R2E, MAT_R3C, MAT_R3D, MAT_M2A, FIS_R1G, FIS_R1H, FIS_R1I, FIS_R2D, FIS_R2E, FIS_R3C, FIS_R3D, FIS_M2A, QUI_R1G, QUI_R1H, QUI_R1I, QUI_R2D, QUI_R2E, QUI_R3C, QUI_R3D, QUI_M2A, BIO_R1G, BIO_R1H, BIO_R1I, BIO_R2D, BIO_R2E, BIO_R3C, BIO_R3D, BIO_M2A, HIS_R1G, HIS_R1H, HIS_R1I, HIS_R2D, HIS_R2E, HIS_R3C, HIS_R3D, HIS_M2A, GEO_R1G, GEO_R1H, GEO_R1I, GEO_R2D, GEO_R2E, GEO_R3C, GEO_R3D, GEO_M2A, SOC_R1G, SOC_R1H, SOC_R1I, SOC_R2D, SOC_R2E, SOC_R3C, SOC_R3D, SOC_M2A, FIL_R1G, FIL_R1H, FIL_R1I, FIL_R2D, FIL_R2E, FIL_R3C, FIL_R3D, FIL_M2A, EDF_R1G, EDF_R1H, EDF_R1I, EDF_R2D, EDF_R2E, EDF_R3C, EDF_R3D, EDF_M2A, EMP_R1G, EMP_R1H, EMP_R1I, EMP_R2D, EMP_R2E, EMP_R3C, EMP_R3D, EMP_M2A, MAF_R1G, MAF_R1H, MAF_R1I, MAF_R2D, MAF_R2E, MAF_R3C, MAF_R3D, MAF_M2A, GPE_R1G, GPE_R1H, GPE_R1I, GPE_R2D, GPE_R2E, GPE_R3C, GPE_R3D, GPE_M2A, ROB_R1G, ROB_R1H, ROB_R1I, ROB_R2D, ROB_R2E, ROB_R3C, ROB_R3D, ROB_M2A, CPE_R1G, CPE_R1H, CPE_R1I, CPE_R2D, CPE_R2E, CPE_R3C, CPE_R3D, CPE_M2A, MEA_R1G, MEA_R1H, MEA_R1I, MEA_R2D, MEA_R2E, MEA_R3C, MEA_R3D, MEA_M2A};

array[professores] of int: K = [6, 18, 8, 10, 26, 20, 2, 24, 9, 11, 1, 10, 16, 26, 12, 8, 6, 3, 3, 2, 2, 2];

enum horarios = {seg1, seg2, seg3, seg4, seg5, seg6, ter1, ter2, ter3, ter4, ter5, ter6, qua1, qua2, qua3, qua4, qua5, qua6, qui1, qui2, qui3, qui4, qui5, qui6, sex1, sex2, sex3, sex4, sex5, sex6};

int: horas = 6;

enum dias = {seg, ter, qua, qui, sex};

array[aulas,professores] of 0..1: T =
/*{POR, ESP, ART, MAT, FIS, QUI, BIO, HIS, GEO, SOC, FIL, EDF, ING, EMP, MAF, GPE, ROB, CPE, MEA}*/
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
% POR X
[|  0,  0,  0,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 1,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 1,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  1, 0, 0,  0,  0,  0
 
% ESP
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  1,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  1,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  1,  0

% ING
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 
% ART
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  1, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  1,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  1,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  1,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% MAT
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  1,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  1,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  1,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% FIS
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 1,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 1,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 1,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  1,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 1,  0, 0, 0,  0,  0,  0

% QUI
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  1,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  1,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  1,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  1,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  1,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% BIO 
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  1,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% HIS
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  1,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  1,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  1,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  1,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  1,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  1,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% GEO
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0

% SOC
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0

% FIL
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 1, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 1, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 1, 0,  0,  0,  0

% EDF
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 
% EMP
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 1,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 1, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  1
 |  0,  0,  0,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% MAF
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  1,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% GPE
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  1, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% ROB
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 1,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

% CPE
 |  0,  1,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0

%MEA
/* DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  1, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
 |  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  0, 0, 0,  0,  0,  0
|];

constraint assert (
  forall(a in aulas)(
    sum(p in professores)(T[a, p]) < 2
  ), "problemas com o T 1"
);

constraint assert (
  sum(a in aulas)(if forall(p in professores) (T[a, p] == 0) then 1 else 0 endif) == 49,
  "problemas com o T 2"
);

array[professores] of int: alocacoes = [4, 8, 8, 5, 5, 10, 1, 6, 4, 2, 1, 5, 4, 16, 10, 4, 2, 3, 2, 1, 1, 1];

constraint assert (
  forall(p in professores) (
    sum(a in aulas)(T[a, p]) == alocacoes[p]
  ),
  "problemas com o T 3"
);

array[aulas] of int: A = [
  6, 6, 6, 6, 6, 5, 5, 5, 
  0, 0, 0, 0, 0, 2, 2, 2, 
  2, 2, 2, 2, 2, 0, 0, 0, 
  1, 1, 1, 1, 1, 0, 0, 1, 
  5, 5, 5, 5, 5, 4, 4, 4, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 3, 3, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  2, 2, 2, 2, 2, 2, 2, 2, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 
  2, 2, 2, 2, 2, 0, 0, 0, 
  0, 1, 0, 0, 0, 0, 0, 0, 
  0, 0, 1, 0, 0, 0, 0, 0, 
  1, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 1, 0, 0, 0, 0, 
  0, 0, 0, 0, 1, 0, 0, 0
];

constraint assert (
  forall(t in turmas)(
    sum(d in disciplinas)(A[aulas[t + (d-1)*length(turmas)]]) == if (t >= R3C \/ t <= M2A) then 25 else 30 endif
  ), "problemas com o A"
);

constraint assert (
  forall(p in professores) (
    sum(a in aulas)(A[a]*T[a, p]) == K[p]
  ),
  "K incompatível"
);

array[horarios, professores] of 0..1: D =
% DY, MA, SH, LI, FB, FT, RI, LU, AD, K, IL, LZ, BH, GA, Y, Z, CJ, W, H, SI, AA, MB*/
% |1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1,  1,  1*/
[| 0,  1,  0,  0,  1,  1,  0,  1,  0, 1,  0,  1,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 | 0,  1,  0,  0,  1,  1,  0,  1,  0, 1,  0,  1,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 | 0,  1,  0,  0,  1,  1,  0,  1,  0, 1,  0,  1,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 | 0,  1,  0,  0,  1,  1,  0,  1,  0, 1,  0,  1,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 | 0,  1,  0,  0,  1,  1,  0,  1,  0, 1,  0,  1,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 | 0,  1,  0,  0,  1,  0,  0,  1,  0, 0,  0,  0,  1,  1, 0, 0,  0, 0, 0,  0,  0,  0
 
 | 1,  1,  1,  1,  1,  1,  0,  0,  0, 0,  0,  0,  0,  1, 0, 1,  0, 0, 0,  0,  0,  0
 | 1,  1,  1,  1,  1,  1,  0,  0,  0, 0,  0,  0,  0,  1, 0, 1,  0, 0, 0,  0,  0,  0
 | 1,  1,  1,  1,  1,  1,  0,  0,  0, 0,  0,  0,  0,  1, 0, 1,  0, 0, 0,  0,  0,  0
 | 1,  1,  1,  1,  1,  1,  0,  0,  0, 0,  0,  0,  0,  1, 0, 1,  0, 0, 0,  0,  0,  0
 | 1,  1,  1,  1,  1,  1,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  1, 0, 0,  0,  0,  1
 | 1,  1,  1,  0,  1,  0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0,  1, 0, 0,  0,  0,  1
 
 | 0,  1,  0,  1,  0,  1,  0,  1,  1, 0,  0,  0,  1,  1, 0, 0,  0, 1, 1,  0,  0,  0
 | 0,  1,  0,  1,  0,  1,  0,  1,  1, 0,  0,  0,  1,  1, 0, 0,  0, 1, 1,  0,  0,  0
 | 0,  1,  0,  1,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 0, 0,  0, 1, 1,  0,  0,  0
 | 0,  1,  0,  1,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 0, 0,  0, 0, 1,  0,  0,  0
 | 0,  1,  0,  1,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 0, 0,  0, 0, 1,  0,  0,  0
 | 0,  1,  0,  0,  1,  0,  0,  1,  1, 0,  0,  0,  0,  1, 0, 0,  0, 0, 1,  0,  0,  0

 | 0,  0,  1,  0,  1,  1,  0,  1,  0, 0,  0,  0,  1,  1, 1, 0,  0, 0, 1,  1,  0,  0
 | 0,  0,  1,  0,  1,  1,  0,  1,  0, 0,  0,  0,  1,  1, 1, 0,  0, 0, 1,  1,  0,  0
 | 0,  0,  1,  0,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 1, 0,  0, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 1, 0,  1, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  1,  1,  0,  1,  1, 0,  0,  0,  1,  1, 1, 0,  1, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  1,  0,  0,  1,  0, 0,  0,  0,  0,  1, 1, 0,  0, 0, 1,  0,  0,  0

 | 0,  0,  0,  0,  1,  0,  0,  1,  0, 1,  0,  1,  0,  1, 1, 1,  1, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  1,  0,  0,  1,  0, 1,  0,  1,  0,  1, 1, 1,  1, 0, 1,  0,  1,  0
 | 0,  0,  0,  0,  1,  0,  0,  1,  0, 1,  0,  1,  0,  1, 1, 1,  0, 0, 1,  0,  1,  0
 | 0,  0,  0,  0,  1,  0,  1,  1,  0, 1,  0,  1,  0,  1, 1, 1,  0, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  1,  0,  1,  1,  0, 1,  0,  1,  0,  1, 1, 1,  0, 0, 1,  0,  0,  0
 | 0,  0,  0,  0,  0,  0,  0,  1,  0, 1,  1,  0,  0,  0, 1, 0,  0, 0, 1,  0,  0,  0

|];

% VARIÁVEL DE DECISÃO
array[horarios, aulas] of var 0..1: S;

% (R1) nenhum professor pode estar em dois ou mais lugares ao mesmo tempo
constraint forall (i in horarios, k in professores)(
  sum(j in aulas)(S[i, j]*T[j,k]) <= 1
);

% (R2) se o professor está alocado para um horário h, ele deve estar disponível naquele horário h
constraint forall (h in horarios, p in professores)(
  (sum(a in aulas)(S[h, a]*T[a, p]) == 1) -> (D[h, p] == 1)
);

% (R3) cada turma tem que ter exatamente o número de aulas que é determinado para ela
constraint forall (a in aulas)(
  sum(h in horarios)(S[h, a]) == A[a]
);

% (R4) cada professor deve ter a carga horária de acordo com o definido
constraint forall (p in professores)(
  sum(a in aulas, h in horarios)(S[h, a] * T[a, p]) == K[p]
);


% (R6) nenhuma turma pode ter mais de uma aula ao mesmo tempo
predicate aulaNaTurma(aulas: a, turmas: t) =  t-1 == (a - 1) mod length(turmas);

constraint forall (t in turmas, h in horarios) (
  sum(a in aulas where aulaNaTurma(a, t))(S[h, a]) <= 1
);

% (R7) cada aula deve ocorrer no máximo 2 vezes por dia na mesma turma

constraint forall (d in dias, a in aulas)(
  sum(h in horarios)(S[h, a]) <= 2
);

set of horarios: sextasAulas = {seg6, ter6, qua6, qui6, sex6};

set of aulas: aulasDoTerceiroOuModulo = {POR_R3C, POR_R3D, POR_M2A, ESP_R3C, ESP_R3D, ESP_M2A, ING_R3C, ING_R3D, ING_M2A, ART_R3C, ART_R3D, ART_M2A, MAT_R3C, MAT_R3D, MAT_M2A, FIS_R3C, FIS_R3D, FIS_M2A, QUI_R3C, QUI_R3D, QUI_M2A, BIO_R3C, BIO_R3D, BIO_M2A, HIS_R3C, HIS_R3D, HIS_M2A, GEO_R3C, GEO_R3D, GEO_M2A, SOC_R3C, SOC_R3D, SOC_M2A, FIL_R3C, FIL_R3D, FIL_M2A, EDF_R3C, EDF_R3D, EDF_M2A, EMP_R3C, EMP_R3D, EMP_M2A, MAF_R3C, MAF_R3D, MAF_M2A, GPE_R3C, GPE_R3D, GPE_M2A, ROB_R3C, ROB_R3D, ROB_M2A, CPE_R3C, CPE_R3D, CPE_M2A, MEA_R3C, MEA_R3D, MEA_M2A};

% Última aula dos terceiros anos é vaga.
constraint forall(h in sextasAulas, a in aulasDoTerceiroOuModulo) (
  S[h, a] == 0
);

predicate horarioNoDia(horarios: h, dias: d) = ((h-1) div horas) + 1 == d;

predicate ultimaAula(horarios: h) = (h mod horas) == 0;

predicate primeiraAula(horarios: h) = (h mod horas) == 1;

% Se existem duas aulas no dia, elas têm que ser geminadas.
% constraint forall(d in dias, a in aulas where sum(h in horarios where horarioNoDia(h, d))(S[h, a]) == 2) (
%     forall(h in horarios where (not ultimaAula(h)) /\ (S[h, a] == 1)) (
%       S[enum_next(horarios, h), a] == 1
%     ) /\
%     forall(h in horarios where (not primeiraAula(h)) /\ (S[h, a] == 1)) (
%       S[enum_prev(horarios, h), a] == 1
%     )
% );

% solve satisfy

solve maximize sum(a in aulas) (
  sum(h in horarios where not ultimaAula(h) /\ S[h, a] == 1) (S[enum_next(horarios, h), a])
);